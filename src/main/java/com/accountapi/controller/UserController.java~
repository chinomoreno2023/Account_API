package com.accountapi.controller;

import com.accountapi.dto.user.CreateUserRequest;
import com.accountapi.dto.user.UserDto;
import com.accountapi.dto.email.UpdateEmailRequest;
import com.accountapi.dto.phone.UpdatePhoneRequest;
import com.accountapi.model.User;
import com.accountapi.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDate;

@RestController
@RequestMapping("/users")
@RequiredArgsConstructor
public class UserController {
    private final UserService userService;

    @GetMapping("/search")
    public Page<User> searchUsers(
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String email,
            @RequestParam(required = false) String phone,
            @RequestParam(required = false) @DateTimeFormat(
                    iso = DateTimeFormat.ISO.DATE) LocalDate dateOfBirth,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size
    ) {
        return userService.searchUsers(name, email, phone, dateOfBirth, PageRequest.of(page, size));
    }

    @PostMapping
    public ResponseEntity<UserDto> createUser(@RequestBody @Valid CreateUserRequest request) {
        User newUser = userService.createUser(request);
        return ResponseEntity.status(HttpStatus.CREATED).body(UserDto.fromEntity(newUser));
    }

    @PutMapping("/email/{id}")
    public ResponseEntity<UserDto> updateEmailRequest(@PathVariable Long id,
                                                      @RequestBody @Valid UpdateEmailRequest request) {
        User updatedUser = userService.updateUser(id, request);
        return ResponseEntity.ok(UserDto.fromEntity(updatedUser));
    }

    @PutMapping("/phone/{id}")
    public ResponseEntity<UserDto> updatePhoneRequest(@PathVariable Long id,
                                                      @RequestBody @Valid UpdatePhoneRequest request) {
        User updatedUser = userService.updateUser(id, request);
        return ResponseEntity.ok(UserDto.fromEntity(updatedUser));
    }
}
