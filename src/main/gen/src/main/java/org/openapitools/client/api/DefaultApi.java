/*
 * Account API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthRequestDto;
import org.openapitools.client.model.AuthResponseDto;
import org.openapitools.client.model.CreateUserRequest;
import java.time.LocalDate;
import org.openapitools.client.model.TransferRequestDto;
import org.openapitools.client.model.UpdateEmailRequest;
import org.openapitools.client.model.UpdatePhoneRequest;
import org.openapitools.client.model.UserDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for authLoginPost
     * @param authRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token issued </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid email or password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginPostCall(AuthRequestDto authRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authRequestDto;

        // create path and map variables
        String localVarPath = "/auth/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authLoginPostValidateBeforeCall(AuthRequestDto authRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authRequestDto' is set
        if (authRequestDto == null) {
            throw new ApiException("Missing the required parameter 'authRequestDto' when calling authLoginPost(Async)");
        }

        return authLoginPostCall(authRequestDto, _callback);

    }

    /**
     * User login
     * 
     * @param authRequestDto  (required)
     * @return AuthResponseDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token issued </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid email or password </td><td>  -  </td></tr>
     </table>
     */
    public AuthResponseDto authLoginPost(AuthRequestDto authRequestDto) throws ApiException {
        ApiResponse<AuthResponseDto> localVarResp = authLoginPostWithHttpInfo(authRequestDto);
        return localVarResp.getData();
    }

    /**
     * User login
     * 
     * @param authRequestDto  (required)
     * @return ApiResponse&lt;AuthResponseDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token issued </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid email or password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthResponseDto> authLoginPostWithHttpInfo(AuthRequestDto authRequestDto) throws ApiException {
        okhttp3.Call localVarCall = authLoginPostValidateBeforeCall(authRequestDto, null);
        Type localVarReturnType = new TypeToken<AuthResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User login (asynchronously)
     * 
     * @param authRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Token issued </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid email or password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginPostAsync(AuthRequestDto authRequestDto, final ApiCallback<AuthResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = authLoginPostValidateBeforeCall(authRequestDto, _callback);
        Type localVarReturnType = new TypeToken<AuthResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferPost
     * @param transferRequestDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transfer success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferPostCall(TransferRequestDto transferRequestDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferRequestDto;

        // create path and map variables
        String localVarPath = "/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferPostValidateBeforeCall(TransferRequestDto transferRequestDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transferRequestDto' is set
        if (transferRequestDto == null) {
            throw new ApiException("Missing the required parameter 'transferRequestDto' when calling transferPost(Async)");
        }

        return transferPostCall(transferRequestDto, _callback);

    }

    /**
     * Transfer money
     * 
     * @param transferRequestDto  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transfer success </td><td>  -  </td></tr>
     </table>
     */
    public String transferPost(TransferRequestDto transferRequestDto) throws ApiException {
        ApiResponse<String> localVarResp = transferPostWithHttpInfo(transferRequestDto);
        return localVarResp.getData();
    }

    /**
     * Transfer money
     * 
     * @param transferRequestDto  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transfer success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> transferPostWithHttpInfo(TransferRequestDto transferRequestDto) throws ApiException {
        okhttp3.Call localVarCall = transferPostValidateBeforeCall(transferRequestDto, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer money (asynchronously)
     * 
     * @param transferRequestDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transfer success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferPostAsync(TransferRequestDto transferRequestDto, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferPostValidateBeforeCall(transferRequestDto, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersEmailIdPut
     * @param id  (required)
     * @param updateEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailIdPutCall(Integer id, UpdateEmailRequest updateEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEmailRequest;

        // create path and map variables
        String localVarPath = "/users/email/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersEmailIdPutValidateBeforeCall(Integer id, UpdateEmailRequest updateEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersEmailIdPut(Async)");
        }

        // verify the required parameter 'updateEmailRequest' is set
        if (updateEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEmailRequest' when calling usersEmailIdPut(Async)");
        }

        return usersEmailIdPutCall(id, updateEmailRequest, _callback);

    }

    /**
     * Update user email
     * 
     * @param id  (required)
     * @param updateEmailRequest  (required)
     * @return UserDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
     </table>
     */
    public UserDto usersEmailIdPut(Integer id, UpdateEmailRequest updateEmailRequest) throws ApiException {
        ApiResponse<UserDto> localVarResp = usersEmailIdPutWithHttpInfo(id, updateEmailRequest);
        return localVarResp.getData();
    }

    /**
     * Update user email
     * 
     * @param id  (required)
     * @param updateEmailRequest  (required)
     * @return ApiResponse&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDto> usersEmailIdPutWithHttpInfo(Integer id, UpdateEmailRequest updateEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = usersEmailIdPutValidateBeforeCall(id, updateEmailRequest, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user email (asynchronously)
     * 
     * @param id  (required)
     * @param updateEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Email updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersEmailIdPutAsync(Integer id, UpdateEmailRequest updateEmailRequest, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersEmailIdPutValidateBeforeCall(id, updateEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPhoneIdPut
     * @param id  (required)
     * @param updatePhoneRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Phone updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPhoneIdPutCall(Integer id, UpdatePhoneRequest updatePhoneRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePhoneRequest;

        // create path and map variables
        String localVarPath = "/users/phone/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPhoneIdPutValidateBeforeCall(Integer id, UpdatePhoneRequest updatePhoneRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersPhoneIdPut(Async)");
        }

        // verify the required parameter 'updatePhoneRequest' is set
        if (updatePhoneRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePhoneRequest' when calling usersPhoneIdPut(Async)");
        }

        return usersPhoneIdPutCall(id, updatePhoneRequest, _callback);

    }

    /**
     * Update user phone
     * 
     * @param id  (required)
     * @param updatePhoneRequest  (required)
     * @return UserDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Phone updated </td><td>  -  </td></tr>
     </table>
     */
    public UserDto usersPhoneIdPut(Integer id, UpdatePhoneRequest updatePhoneRequest) throws ApiException {
        ApiResponse<UserDto> localVarResp = usersPhoneIdPutWithHttpInfo(id, updatePhoneRequest);
        return localVarResp.getData();
    }

    /**
     * Update user phone
     * 
     * @param id  (required)
     * @param updatePhoneRequest  (required)
     * @return ApiResponse&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Phone updated </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDto> usersPhoneIdPutWithHttpInfo(Integer id, UpdatePhoneRequest updatePhoneRequest) throws ApiException {
        okhttp3.Call localVarCall = usersPhoneIdPutValidateBeforeCall(id, updatePhoneRequest, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user phone (asynchronously)
     * 
     * @param id  (required)
     * @param updatePhoneRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Phone updated </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPhoneIdPutAsync(Integer id, UpdatePhoneRequest updatePhoneRequest, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPhoneIdPutValidateBeforeCall(id, updatePhoneRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersPost
     * @param createUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersPostValidateBeforeCall(CreateUserRequest createUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling usersPost(Async)");
        }

        return usersPostCall(createUserRequest, _callback);

    }

    /**
     * Create new user
     * 
     * @param createUserRequest  (required)
     * @return UserDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public UserDto usersPost(CreateUserRequest createUserRequest) throws ApiException {
        ApiResponse<UserDto> localVarResp = usersPostWithHttpInfo(createUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create new user
     * 
     * @param createUserRequest  (required)
     * @return ApiResponse&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDto> usersPostWithHttpInfo(CreateUserRequest createUserRequest) throws ApiException {
        okhttp3.Call localVarCall = usersPostValidateBeforeCall(createUserRequest, null);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new user (asynchronously)
     * 
     * @param createUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> User created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersPostAsync(CreateUserRequest createUserRequest, final ApiCallback<UserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersPostValidateBeforeCall(createUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersSearchGet
     * @param name  (optional)
     * @param email  (optional)
     * @param phone  (optional)
     * @param dateOfBirth  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSearchGetCall(String name, String email, String phone, LocalDate dateOfBirth, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (dateOfBirth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfBirth", dateOfBirth));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersSearchGetValidateBeforeCall(String name, String email, String phone, LocalDate dateOfBirth, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        return usersSearchGetCall(name, email, phone, dateOfBirth, page, size, _callback);

    }

    /**
     * Search users
     * 
     * @param name  (optional)
     * @param email  (optional)
     * @param phone  (optional)
     * @param dateOfBirth  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of users </td><td>  -  </td></tr>
     </table>
     */
    public Object usersSearchGet(String name, String email, String phone, LocalDate dateOfBirth, Integer page, Integer size) throws ApiException {
        ApiResponse<Object> localVarResp = usersSearchGetWithHttpInfo(name, email, phone, dateOfBirth, page, size);
        return localVarResp.getData();
    }

    /**
     * Search users
     * 
     * @param name  (optional)
     * @param email  (optional)
     * @param phone  (optional)
     * @param dateOfBirth  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> usersSearchGetWithHttpInfo(String name, String email, String phone, LocalDate dateOfBirth, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = usersSearchGetValidateBeforeCall(name, email, phone, dateOfBirth, page, size, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search users (asynchronously)
     * 
     * @param name  (optional)
     * @param email  (optional)
     * @param phone  (optional)
     * @param dateOfBirth  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersSearchGetAsync(String name, String email, String phone, LocalDate dateOfBirth, Integer page, Integer size, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersSearchGetValidateBeforeCall(name, email, phone, dateOfBirth, page, size, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
