openapi: 3.0.3
info:
  title: Account API
  version: 1.0.0

servers:
  - url: http://localhost:8088

paths:
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestDto'
      responses:
        '200':
          description: Token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDto'
        '400':
          description: Invalid email or password

  /transfer:
    post:
      summary: Transfer money
      tags: [Transactions]
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDto'
      responses:
        '200':
          description: Transfer success
          content:
            application/json:
              schema:
                type: string

  /users/search:
    get:
      summary: Search users
      tags: [Users]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
        - in: query
          name: phone
          schema:
            type: string
        - in: query
          name: dateOfBirth
          schema:
            type: string
            format: date
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: size
          schema:
            type: integer
      responses:
        '200':
          description: Page of users
          content:
            application/json:
              schema:
                type: object

  /users:
    post:
      summary: Create new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /users/email/{id}:
    put:
      summary: Update user email
      tags: [Users]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequest'
      responses:
        '200':
          description: Email updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /users/phone/{id}:
    put:
      summary: Update user phone
      tags: [Users]
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhoneRequest'
      responses:
        '200':
          description: Phone updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRequestDto:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 50

    AuthResponseDto:
      type: object
      properties:
        token:
          type: string

    TransferRequestDto:
      type: object
      required: [to, value]
      properties:
        to:
          type: integer
        value:
          type: number
          format: double
          minimum: 0.01

    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        dateOfBirth:
          type: string
          format: date
        password:
          type: string
        email:
          type: string
        phone:
          type: string

    UpdatePhoneRequest:
      type: object
      required: [oldPhone, operationType]
      properties:
        oldPhone:
          type: string
          pattern: '^\\d{11}$'
        newPhone:
          type: string
          pattern: '^\\d{11}$'
        operationType:
          $ref: '#/components/schemas/UpdateUserOperationType'

    UpdateEmailRequest:
      type: object
      required: [oldEmail, operationType]
      properties:
        oldEmail:
          type: string
          format: email
        newEmail:
          type: string
          format: email
        operationType:
          $ref: '#/components/schemas/UpdateUserOperationType'

    UpdateUserOperationType:
      type: string
      enum: [ADD, DELETE, CHANGE]

    UserDto:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        dateOfBirth:
          type: string
          format: date
        emails:
          type: array
          items:
            type: string
        phones:
          type: array
          items:
            type: string
